from random import choice


def generate_password(length, char):
    pas = ''
    for _ in range(length):
        pas += choice(char)
    return pas


def yesno_check(ans):
    while ans.lower() not in ['yes', 'no']:
        print('i cannot understand, answer "yes" or "no"')
        ans = input()
    if ans.lower() == 'yes':
        ans = 1
    else:
        ans = 0
    return ans


def num_check(ans):
    while not ans.isdigit() or ans.count('0') == len(ans) or '-' in ans:
        if not ans.isdigit():
            print('i cannot understand')
            ans = input()
            continue
        elif int(ans) <= 0:
            print('maybe you should choose another quantity of passwords, more than 0?')
            ans = input()
            continue
    return int(ans)


DIGITS = '0123456789'
LWRCASE_LET = 'abcdefghijklmnopqrstuvwxyz'
UPRCASE_LET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
PUNCT = '!#$%&*+-=?@^_'
AMBIGUOUS = "il1Lo0O"
usenum, useupcs, uselwcs, usesym, useamb = 0, 0, 0, 0, 0
print('how many passwords do you need?')
quan = num_check(input())
while usenum + useupcs + uselwcs + usesym + useamb == 0:
    print('should we use numbers to make a password?')
    usenum = yesno_check(input())
    print('should we use uppercase letters to make a password?')
    useupcs = yesno_check(input())
    print('should we use lowercase letters to make a password?')
    uselwcs = yesno_check(input())
    print('should your password contain symbols? Example: "!#$%&*+-=?@^_"')
    usesym = yesno_check(input())
    print('should your password include this letters and numbers: "il1Lo0O"?')
    useamb = yesno_check(input())
    if usenum + useupcs + uselwcs + usesym + useamb == 0:
        print('maybe you should choose something to make a password?', '', sep='\n')
chars = ''.join([usenum * DIGITS, UPRCASE_LET * useupcs, LWRCASE_LET * uselwcs, PUNCT * usesym])
if useamb == 0:
    chars = [i for i in chars if i not in AMBIGUOUS]
print('please, enter a length of your password')
leng = num_check(input())
print(*[generate_password(leng, chars) for _ in range(quan)], sep='\n')
